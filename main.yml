- hosts: all
  
  become: yes
  vars:

    default_user: vagrant
    default_home: /home/{{ default_user }}
    minikube_install_path: /usr/local/bin/minikube
    minikube_bin_url: https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    go_bin_url: https://storage.googleapis.com/golang/getgo/installer_linux
    cri_download_path: '{{ default_home }}/cri-dockerd'
    cri_repo_url: https://github.com/Mirantis/cri-dockerd.git
    cri_install_path: /usr/local/bin/cri-dockerd
    crictl_version: v1.24.1

  tasks:
    
    - name: Check if minikube binary is downloaded
      stat: 
        path: '{{ default_home }}/minikube-linux-amd64'
      register: minikube_downloaded

    - name: Download minikube
      get_url: 
        url: '{{ minikube_bin_url }}'
        dest: '{{ default_home }}'
      when: not minikube_downloaded.stat.exists

    - name: Check if minikube is installed
      stat:
        path: '{{ minikube_install_path }}'
      register: minikube_installed

    - name: Install minikube
      copy:
        src: '{{ default_home }}/minikube-linux-amd64'
        remote_src: yes
        dest: '{{ minikube_install_path }}'
        owner: root
        group: root
        mode: 'u=rwx,go=rx'
      when: not minikube_installed.stat.exists
    
    - name: Check if Docker is installed
      shell: docker --version
      register: docker_installed

    - name: Install prerequisites for Docker repository
      apt:
        name: ['apt-transport-https', 'ca-certificates', 'curl', 'gnupg2', 'software-properties-common', 'conntrack', 'net-tools', 'python3-pip', 'python3-setuptools', 'virtualenv']
        update_cache: yes
      when: docker_installed is failed
    
    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
      when: docker_installed is failed

    - name: Add Docker APT repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/{{ ansible_system | lower }}/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable
      when: docker_installed is failed

    - name: Install Docker CE and other components
      apt:
        name: ['docker-ce', 'docker-ce-cli', 'containerd.io', 'docker-compose-plugin']
        update_cache: yes
      when: docker_installed is failed

    - name: Add default user to docker group
      user:
        name: '{{ default_user }}'
        groups: docker
        append: yes
      when: docker_installed is failed

    - name: Check if GO is installed
      shell: go version
      environment:
        PATH: "/root/.go/bin:{{ ansible_env.PATH }}"
      register: golang_installed

    - name: Download GO binary
      get_url:
        url: '{{ go_bin_url }}'
        dest: '{{ default_home }}'
        owner: root
        group: root
        mode: 'u=rwx,go=rw'
      when: golang_installed is failed

    - name: Install GO
      command: ./installer_linux
      when: golang_installed is failed
    
    - name: Clone cri-dockerd repo
      git:
        repo: '{{ cri_repo_url }}'
        dest: '{{ cri_download_path }}'
        clone: yes
        update: yes

    - name: Check if cri-dockerd build dir exists
      stat:
        path: '{{ cri_download_path }}/bin'
      register: cri_build_dir

    - name: Check if cri-dockerd is already built
      stat:
        path: '{{ cri_download_path }}/bin/cri-dockerd'
      register: cri_bin

    - name: Create build directory for cri-dockerd
      file:
        path: '{{ cri_download_path }}/bin'
        state: directory
        owner: root
        group: root
        mode: 'u=rwx,go=rx'
      when: not cri_build_dir.stat.exists

    - name: Build cri-dockerd
      shell: go build -o bin/cri-dockerd
      environment:
        PATH: "/root/.go/bin:{{ ansible_env.PATH }}"
      args:
        chdir: '{{ cri_download_path }}'
      when: not cri_bin.stat.exists
      
    - name: Install cri-dockerd
      copy:
        src: '{{ cri_download_path }}/bin/cri-dockerd'
        remote_src: yes
        dest: '{{ cri_install_path }}'
        owner: root
        group: root
        mode: 'u=rwx,go=rx'

    - name: Add cri-dockerd systemd service
      copy:
        src: '{{ cri_download_path }}/packaging/systemd/'
        remote_src: yes
        dest: /etc/systemd/system
        owner: root
        group: root
    
    - name: Replace a line in the unit file
      replace:
        path: /etc/systemd/system/cri-docker.service
        regexp: '\/usr\/bin\/cri-dockerd'
        replace: /usr/local/bin/cri-dockerd
    
    - name: Reload daemon
      shell: systemctl daemon-reload
    
    - name: Enable cri-dockerd service
      shell: systemctl enable cri-docker.service

    - name: Enable cri-dockerd socket
      shell: systemctl enable --now cri-docker.socket

    - name: Download crictl
      get_url:
        url: https://github.com/kubernetes-sigs/cri-tools/releases/download/{{ crictl_version }}/crictl-{{ crictl_version }}-linux-amd64.tar.gz
        dest: '{{ default_home }}'
        owner: root
        group: root
        mode: 'u=rwx,go=rx'
      register: crictl_downloaded

    - name: Unpack and install crictl
      unarchive:
        src: '{{ default_home }}/crictl-{{ crictl_version }}-linux-amd64.tar.gz'
        dest: /usr/local/bin
        remote_src: yes
      register: crictl_installed

  post_tasks:

    - name: check the status of minikube.
      shell: minikube status
      register: minikube_status
      changed_when: false
      ignore_errors: true

    - name: start minikube if it's not running.
      become: no
      shell: minikube start --driver=none
      when: "not minikube_status.stdout or 'Running' not in minikube_status.stdout"